import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User, UserRole, UserStatus } from '../User/user.entity';
import { Project, ProjectStatus, ProjectType } from '../Project/project.entity';
import { Bid, BidStatus } from '../Bid/bid.entity';
import { Review } from '../Review/review.entity';

@Injectable()
export class SeederService {
  constructor(
    @InjectRepository(User) private userRepo: Repository<User>,
    @InjectRepository(Project) private projectRepo: Repository<Project>,
    @InjectRepository(Bid) private bidRepo: Repository<Bid>,
    @InjectRepository(Review) private reviewRepo: Repository<Review>,
  ) {}

  async seedAll() {
    console.log('üå± –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î...');
    
    // await this.clearData();
    const users = await this.seedUsers();
    const projects = await this.seedProjects(users);
    await this.seedBids(users, projects);
    await this.seedReviews(users, projects);
    
    console.log('‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }

  // async clearData() {
  //   // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ query builder –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
  //   await this.reviewRepo.createQueryBuilder().delete().execute();
  //   await this.bidRepo.createQueryBuilder().delete().execute();
  //   await this.projectRepo.createQueryBuilder().delete().execute();
  //   await this.userRepo.createQueryBuilder().delete().execute();
  // }

  async seedUsers() {
    const skills = [
      ['JavaScript', 'React', 'Node.js'],
      ['Python', 'Django', 'PostgreSQL'],
      ['PHP', 'Laravel', 'MySQL'],
      ['Java', 'Spring', 'Hibernate'],
      ['C#', '.NET', 'SQL Server'],
      ['Vue.js', 'TypeScript', 'Express'],
      ['Angular', 'RxJS', 'MongoDB'],
      ['Flutter', 'Dart', 'Firebase'],
      ['React Native', 'Redux', 'API'],
      ['WordPress', 'CSS', 'HTML']
    ];

    const cities = ['–ö–∏—ó–≤', '–õ—å–≤—ñ–≤', '–•–∞—Ä–∫—ñ–≤', '–û–¥–µ—Å–∞', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è'];
    const countries = ['–£–∫—Ä–∞—ó–Ω–∞', '–ü–æ–ª—å—â–∞', '–ù—ñ–º–µ—á—á–∏–Ω–∞', '–°–®–ê', '–ö–∞–Ω–∞–¥–∞'];

    const users: User[] = [];

    // –ö–ª—ñ—î–Ω—Ç–∏
    for (let i = 1; i <= 20; i++) {
      const user = this.userRepo.create({
        name: `Client ${i}`,
        email: `client${i}@example.com`,
        password: 'hashed_password',
        role: UserRole.CLIENT,
        status: Math.random() > 0.1 ? UserStatus.ACTIVE : UserStatus.INACTIVE,
        city: cities[Math.floor(Math.random() * cities.length)],
        country: countries[Math.floor(Math.random() * countries.length)],
        bio: `–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –∑ ${Math.floor(Math.random() * 5) + 1} —Ä–æ–∫–∞–º–∏ —Ä–æ–±–æ—Ç–∏`,
        rating: Math.round((Math.random() * 2 + 3) * 100) / 100,
        total_projects: Math.floor(Math.random() * 20),
      });
      users.push(user);
    }

    // –§—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∏
    for (let i = 1; i <= 30; i++) {
      const user = this.userRepo.create({
        name: `Freelancer ${i}`,
        email: `freelancer${i}@example.com`,
        password: 'hashed_password',
        role: UserRole.FREELANCER,
        status: Math.random() > 0.05 ? UserStatus.ACTIVE : UserStatus.BANNED,
        city: cities[Math.floor(Math.random() * cities.length)],
        country: countries[Math.floor(Math.random() * countries.length)],
        bio: `–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –∑ ${Math.floor(Math.random() * 8) + 1} —Ä–æ–∫–∞–º–∏ –¥–æ—Å–≤—ñ–¥—É`,
        hourly_rate: Math.floor(Math.random() * 80) + 20,
        skills: skills[Math.floor(Math.random() * skills.length)],
        rating: Math.round((Math.random() * 2 + 3) * 100) / 100,
        total_projects: Math.floor(Math.random() * 50),
      });
      users.push(user);
    }

    return await this.userRepo.save(users);
  }

  async seedProjects(users: User[]) {
    const clients = users.filter(u => u.role === UserRole.CLIENT);
    const freelancers = users.filter(u => u.role === UserRole.FREELANCER);
    
    const projectTitles = [
      '–†–æ–∑—Ä–æ–±–∫–∞ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –¥–ª—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –∫–æ–º–µ—Ä—Ü—ñ—ó',
      '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —ó–∂—ñ',
      '–î–∏–∑–∞–π–Ω —Ç–∞ —Ä–æ–∑—Ä–æ–±–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–π—Ç—É',
      '–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è API –¥–ª—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏',
      '–†–æ–∑—Ä–æ–±–∫–∞ CRM —Å–∏—Å—Ç–µ–º–∏',
      '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–ª–æ–≥—É –Ω–∞ WordPress',
      '–†–æ–∑—Ä–æ–±–∫–∞ —á–∞—Ç-–±–æ—Ç—É –¥–ª—è Telegram',
      '–î–∏–∑–∞–π–Ω UI/UX –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É',
      '–†–æ–∑—Ä–æ–±–∫–∞ —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º',
      '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏'
    ];

    const skillSets = [
      ['React', 'Node.js', 'MongoDB'],
      ['Flutter', 'Firebase', 'API'],
      ['WordPress', 'PHP', 'MySQL'],
      ['Vue.js', 'Laravel', 'PostgreSQL'],
      ['Angular', 'C#', '.NET']
    ];

    const projects: Project[] = [];

    for (let i = 0; i < 50; i++) {
      const client = clients[Math.floor(Math.random() * clients.length)];
      const freelancer = Math.random() > 0.3 ? freelancers[Math.floor(Math.random() * freelancers.length)] : null;
      
      const statuses = [ProjectStatus.OPEN, ProjectStatus.IN_PROGRESS, ProjectStatus.COMPLETED, ProjectStatus.CANCELLED];
      const status = freelancer ? statuses[Math.floor(Math.random() * statuses.length)] : ProjectStatus.OPEN;
      
      // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å create()
      const projectData = {
        title: projectTitles[Math.floor(Math.random() * projectTitles.length)],
        description: `–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø—Ä–æ–µ–∫—Ç—É ${i + 1}. –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö –≤–∏–º–æ–≥ –∫–ª—ñ—î–Ω—Ç–∞.`,
        project_type: Math.random() > 0.5 ? ProjectType.FIXED : ProjectType.HOURLY,
        budget: Math.floor(Math.random() * 5000) + 500,
        required_skills: skillSets[Math.floor(Math.random() * skillSets.length)],
        status,
        deadline: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000),
        client_id: client.id,
        freelancer_id: freelancer?.id || undefined,
        started_at: status !== ProjectStatus.OPEN ? new Date(Date.now() - Math.random() * 20 * 24 * 60 * 60 * 1000) : undefined,
        completed_at: status === ProjectStatus.COMPLETED ? new Date() : undefined,
      };
      
      const project = this.projectRepo.create(projectData);
      projects.push(project);
    }

    return await this.projectRepo.save(projects);
  }

  async seedBids(users: User[], projects: Project[]) {
    const freelancers = users.filter(u => u.role === UserRole.FREELANCER);
    const bids: Bid[] = [];

    for (const project of projects) {
      const numBids = Math.floor(Math.random() * 5) + 1;
      const bidders = freelancers.sort(() => 0.5 - Math.random()).slice(0, numBids);

      for (const freelancer of bidders) {
        const bidData = {
          project_id: project.id,
          freelancer_id: freelancer.id,
          amount: Math.round(project.budget * (0.7 + Math.random() * 0.6) * 100) / 100,
          proposal: `–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥ ${freelancer.name}. –ú–∞—é –¥–æ—Å–≤—ñ–¥ —É –ø–æ–¥—ñ–±–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —ñ –≥–æ—Ç–æ–≤–∏–π –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ä–æ–±–æ—Ç—É —è–∫—ñ—Å–Ω–æ —Ç–∞ –≤ —Å—Ç—Ä–æ–∫.`,
          delivery_days: Math.floor(Math.random() * 14) + 3,
          status: project.freelancer_id === freelancer.id ? BidStatus.ACCEPTED : 
                  Math.random() > 0.8 ? BidStatus.REJECTED : BidStatus.PENDING,
        };
        
        const bid = this.bidRepo.create(bidData);
        bids.push(bid);
      }
    }

    return await this.bidRepo.save(bids);
  }

  async seedReviews(users: User[], projects: Project[]) {
    const completedProjects = projects.filter(p => p.status === ProjectStatus.COMPLETED);
    const reviews: Review[] = [];

    for (const project of completedProjects) {
      if (Math.random() > 0.3 && project.freelancer_id) {
        // –í—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞
        const clientReviewData = {
          project_id: project.id,
          reviewer_id: project.client_id,
          reviewed_id: project.freelancer_id,
          rating: Math.round((Math.random() * 2 + 3) * 100) / 100,
          comment: '–í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞! –§—Ä—ñ–ª–∞–Ω—Å–µ—Ä –≤–∏–∫–æ–Ω–∞–≤ –≤—Å–µ –≤ —Å—Ç—Ä–æ–∫ —ñ —è–∫—ñ—Å–Ω–æ.',
        };
        
        const clientReview = this.reviewRepo.create(clientReviewData);
        reviews.push(clientReview);

        // –í—ñ–¥–≥—É–∫ –≤—ñ–¥ —Ñ—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        if (Math.random() > 0.5) {
          const freelancerReviewData = {
            project_id: project.id,
            reviewer_id: project.freelancer_id,
            reviewed_id: project.client_id,
            rating: Math.round((Math.random() * 2 + 3) * 100) / 100,
            comment: '–ö–ª—ñ—î–Ω—Ç –±—É–≤ –¥—É–∂–µ –∫–æ–º—É–Ω—ñ–∫–∞–±–µ–ª—å–Ω–∏–º —ñ —à–≤–∏–¥–∫–æ –Ω–∞–¥–∞–≤–∞–≤ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤\'—è–∑–æ–∫.',
          };
          
          const freelancerReview = this.reviewRepo.create(freelancerReviewData);
          reviews.push(freelancerReview);
        }
      }
    }

    return await this.reviewRepo.save(reviews);
  }
}